#include "BotHandler.h"
#include <iostream>
#include <cpr/cpr.h>
#include <nlohmann/json.hpp>
#include <thread>
#include <chrono>
#include <random>

using json = nlohmann::json;

BotHandler::BotHandler(const std::string& token, sqlite3* db)
    : bot(token), db(db),
    userService(db),
    styleService(),
    questionnaire() {
    setupHandlers();
}

void BotHandler::start() {
    try {
        bot.getApi().deleteWebhook();
        std::cout << "Webhook deleted." << std::endl;

        std::cout << "Bot username: " << bot.getApi().getMe()->username << std::endl;
        TgBot::TgLongPoll longPoll(bot);
        while (true) {
            std::cout << "Polling..." << std::endl;
            longPoll.start();
        }
    }
    catch (const TgBot::TgException& e) {
        std::cerr << "Bot error: " << e.what() << std::endl;
    }
}

void BotHandler::setupHandlers() {
    bot.getEvents().onCallbackQuery([this](TgBot::CallbackQuery::Ptr query) {
        handleCallbackQuery(query);
        });

    bot.getEvents().onAnyMessage([this](TgBot::Message::Ptr message) {
        handleMessage(message);
        });
}

void BotHandler::handleCallbackQuery(TgBot::CallbackQuery::Ptr query) {
    int64_t chatId = query->message->chat->id;
    int msgId = query->message->messageId;
    const std::string& data = query->data;

    if (data == "main_menu") {
        users[chatId] = UserState();
        bot.getApi().editMessageText(
            u8"‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç–∏–ª—é.\n\n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            chatId, msgId, "", "Markdown", false, KeyboardFactory::getMainMenuKeyboard());
    }
    else if (data == "search_product") {
        users[chatId].awaitingProductId = true;
        bot.getApi().sendMessage(chatId, u8"üì¶ –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:");
    }
    else if (data == "start_test") {
        users[chatId] = UserState();
        questionnaire.resetUser(chatId);
        const Question& q = questionnaire.getQuestion(0);
        TgBot::Message::Ptr sent = bot.getApi().sendMessage(
            chatId, q.text + u8"\n\n" +
            q.options[0] + "\n" + q.options[1] + "\n" + q.options[2] + "\n" + q.options[3],
            false, 0, KeyboardFactory::getAnswerButtons(false));
        users[chatId].lastQuestionMessageId = sent->messageId;
        previousQuestionMessageIds[chatId] = sent->messageId;
    }
    else if (data.rfind("answer_", 0) == 0) {
        if (users[chatId].lastQuestionMessageId != msgId) {
            bot.getApi().answerCallbackQuery(query->id, u8"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.", true);
            return;
        }
        char answer = data[7];
        questionnaire.recordAnswer(chatId, answer);
        int step = ++users[chatId].step;

        try {
            bot.getApi().deleteMessage(chatId, previousQuestionMessageIds[chatId]);
        }
        catch (...) {}

        if (step >= questionnaire.getTotalQuestions()) {
            char style = questionnaire.calculateResult(chatId);
            std::string styleName;
            std::string styleDescription;
            switch (style) {
            case 'A': styleName = u8"–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å";
                styleDescription = u8"–°—Ç—Ä–æ–≥–∏–µ –ª–∏–Ω–∏–∏, —Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞..."; break;
            case 'B': styleName = u8"–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å";
                styleDescription = u8"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞..."; break;
            case 'C': styleName = u8"–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å";
                styleDescription = u8"–ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞, –ª—ë–≥–∫–∏–µ —Ç–∫–∞–Ω–∏..."; break;
            case 'D': styleName = u8"–î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å";
                styleDescription = u8"–Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã..."; break;
            }

            std::stringstream ss;
            ss << u8"‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n" << styleName << "\n\n" << styleDescription << "\n\n";
            auto percentages = questionnaire.getAnswerPercentages(chatId);
            ss << u8"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n";
            ss << std::fixed << std::setprecision(1);
            ss << "A: " << percentages['A'] << "%\n";
            ss << "B: " << percentages['B'] << "%\n";
            ss << "C: " << percentages['C'] << "%\n";
            ss << "D: " << percentages['D'] << "%\n";

            userService.setUserStyle(chatId, style);
            bot.getApi().sendMessage(chatId, ss.str(), false, 0, KeyboardFactory::getMainMenuKeyboard());

            questionnaire.resetUser(chatId);
            users.erase(chatId);
            previousQuestionMessageIds.erase(chatId);
        }
        else {
            const auto& q = questionnaire.getQuestion(step);
            TgBot::Message::Ptr sent = bot.getApi().sendMessage(
                chatId, q.text + u8"\n\n" +
                q.options[0] + "\n" + q.options[1] + "\n" + q.options[2] + "\n" + q.options[3],
                false, 0, KeyboardFactory::getAnswerButtons(step > 0));
            users[chatId].lastQuestionMessageId = sent->messageId;
            previousQuestionMessageIds[chatId] = sent->messageId;
        }
    }
    else if (data == "settings") {
        bool tipsEnabled = userService.isDailyTipsEnabled(chatId);
        bot.getApi().editMessageText(
            u8"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞.",
            chatId, msgId, "", "Markdown", false,
            KeyboardFactory::getSettingsKeyboard(tipsEnabled));
    }
    else if (data == "toggle_daily_tips") {
        bool current = userService.isDailyTipsEnabled(chatId);
        userService.setDailyTipsEnabled(chatId, !current);
        bot.getApi().editMessageText(
            u8"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
            chatId, msgId, "", "Markdown", false,
            KeyboardFactory::getSettingsKeyboard(!current));
    }
    else if (data == "similar_products") {
        if (users.count(chatId) && !users[chatId].currentProduct.name.empty()) {
            const auto& target = users[chatId].currentProduct;
            const auto& all = users[chatId].allProducts;

            auto matches = ProductService::findCompatibleProductsAdvanced(target, all);
            if (!matches.empty()) {
                bot.getApi().sendMessage(chatId, u8"üß© –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:");
                for (const auto& p : matches) {
                    std::string url = u8"http://localhost:18080/card?id=" + std::to_string(p.id);
                    std::string msg = u8"‚Ä¢ " + p.name + "\n" + p.description + "\n" + url;
                    if (!p.image_url.empty()) {
                        bot.getApi().sendPhoto(chatId, p.image_url);
                    }
                    else
                        bot.getApi().sendMessage(chatId, msg);
                }
                bot.getApi().sendMessage(chatId, u8"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", false, 0, KeyboardFactory::getBackAndMenuKeyboard());
            }
            else {
                bot.getApi().sendMessage(chatId, u8"üîé –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            }
        }
        else {
            bot.getApi().sendMessage(chatId, u8"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.");
        }
    }
    else if (data == "match_products") {
        const auto& state = users[chatId];
        if (!state.currentProduct.name.empty()) {
            auto matches = ProductService::findCompatibleByCategoryFlexible(state.currentProduct, state.allProducts);
            if (!matches.empty()) {
                bot.getApi().sendMessage(chatId, u8"üß© –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
                for (const auto& p : matches) {
                    std::string url = u8"http://localhost:18080/card?id=" + std::to_string(p.id);
                    std::string msg = u8"‚Ä¢ " + p.name + "\n" + p.description + "\n" + url;
                    if (!p.image_url.empty())
                        bot.getApi().sendPhoto(chatId, p.image_url, msg);
                    else
                        bot.getApi().sendMessage(chatId, msg);
                }
                bot.getApi().sendMessage(chatId, u8"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", false, 0, KeyboardFactory::getBackAndMenuKeyboard());
            }
            else {
                bot.getApi().sendMessage(chatId, u8"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            }
        }
        else {
            bot.getApi().sendMessage(chatId, u8"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.");
        }
    }
    else if (data == "care_tips") {
        const auto& product = users[chatId].currentProduct;

        if (!product.name.empty()) {
            std::string category = product.category_name;
            std::string tip = u8"‚ÑπÔ∏è –°–æ–≤–µ—Ç –ø–æ —É—Ö–æ–¥—É:\n";

            static const std::map<std::string, std::string> careTipsMap = {
                {"–§—É—Ç–±–æ–ª–∫–∏", u8"üëï –°—Ç–∏—Ä–∞—Ç—å –ø—Ä–∏ 30¬∞C, –≤—ã–≤–µ—Ä–Ω—É–≤ –Ω–∞–∏–∑–Ω–∞–Ω–∫—É. –ò–∑–±–µ–≥–∞—Ç—å —Å—É—à–∫–∏ –≤ –º–∞—à–∏–Ω–µ."},
                {"–†—É–±–∞—à–∫–∏", u8"üß∫ –ì–ª–∞–¥–∏—Ç—å –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ. –•—Ä–∞–Ω–∏—Ç—å –Ω–∞ –ø–ª–µ—á–∏–∫–∞—Ö."},
                {"–ü–ª–∞—Ç—å—è", u8"üå∏ –°—Ç–∏—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–π —Å—Ç–∏—Ä–∫–∏."},
                {"–ö—Ä–æ—Å—Å–æ–≤–∫–∏", u8"üëü –ù–µ —Å—Ç–∏—Ä–∞—Ç—å –≤ –º–∞—à–∏–Ω–µ. –ü—Ä–æ—Ç–∏—Ä–∞—Ç—å –≤–ª–∞–∂–Ω–æ–π —Ç—Ä—è–ø–∫–æ–π."},
                {"–ë—Ä—é–∫–∏", u8"üßº –°—Ç–∏—Ä–∫–∞ –ø—Ä–∏ 30¬∞C. –ì–ª–∞–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–∫–∞–Ω—å."},
                {"default", u8"üîß –û–±—â–∏–π —Å–æ–≤–µ—Ç: —á–∏—Ç–∞–π—Ç–µ —è—Ä–ª—ã–∫ –Ω–∞ –∏–∑–¥–µ–ª–∏–∏ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä."}
            };

            if (careTipsMap.count(category)) {
                tip += careTipsMap.at(category);
            }
            else {
                tip += careTipsMap.at("default");
            }

            bot.getApi().sendMessage(chatId, tip);
            bot.getApi().sendMessage(chatId, u8"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", false, 0, KeyboardFactory::getBackAndMenuKeyboard());
        }
        else {
            bot.getApi().sendMessage(chatId, u8"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.");
        }
    }
    else if (data == "back_to_search") {
        users[chatId].awaitingProductId = true;
        bot.getApi().sendMessage(chatId, u8"üì¶ –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:");
    }
    else if (data == "back_to_product_menu") {
        bot.getApi().sendMessage(chatId, u8"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", false, 0, KeyboardFactory::getProductMenuKeyboard());
    }

    bot.getApi().answerCallbackQuery(query->id);
}

void BotHandler::handleMessage(TgBot::Message::Ptr message) {
    int64_t chatId = message->chat->id;
    if (message->text.empty()) return;

    if (users.find(chatId) == users.end()) {
        userService.addUser(chatId);
        users[chatId] = UserState(); 
        bot.getApi().sendMessage(chatId,
            u8"‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç–∏–ª—é.\n\n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            false, 0, KeyboardFactory::getMainMenuKeyboard());
        return;
    }

    if (users[chatId].awaitingProductId) {
        std::string input = message->text;
        input.erase(remove_if(input.begin(), input.end(), ::isspace), input.end());

        if (!std::all_of(input.begin(), input.end(), ::isdigit)) {
            bot.getApi().sendMessage(chatId, u8"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ü–∏—Ñ—Ä—ã).");
            return;
        }

        try {
            int productId = std::stoi(input);
            std::string apiUrl = "http://localhost:18080/api/product/" + std::to_string(productId);
            cpr::Response r = cpr::Get(cpr::Url{ apiUrl });

            std::string rawResponse = r.text;
            std::string jsonString = productService.cleanJson(rawResponse);

            if (r.status_code == 200) {
                try {
                    auto j = json::parse(jsonString);
                    Product target;
                    target.id = j.value("id", -1);
                    target.name = j.value("name", "");
                    target.description = j.value("description", "");
                    target.brand = j.value("brand", "");
                    target.image_url = j.value("image_url", "");
                    target.category_name = j.value("category", "");

                    if (target.id > 0 && !target.name.empty()) {
                        std::string productUrl = "http://localhost:18080/card?id=" + std::to_string(productId);
                        std::string messageText = u8"–ù–∞–∑–≤–∞–Ω–∏–µ: " + target.name + "\n" +
                            u8"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: " + productUrl;

                        if (!target.image_url.empty()) {
                            bot.getApi().sendPhoto(chatId, target.image_url, messageText);
                        }
                        else {
                            bot.getApi().sendMessage(chatId, messageText);
                        }

                        cpr::Response allResp = cpr::Get(cpr::Url{ "http://localhost:18080/api/products" });
                        std::vector<Product> allProducts;

                        if (allResp.status_code == 200) {
                            std::string cleanedAll = productService.cleanJson(allResp.text);
                            auto allJson = json::parse(cleanedAll);
                            for (const auto& item : allJson) {
                                Product p;
                                p.id = item.value("id", -1);
                                p.name = item.value("name", "");
                                p.description = item.value("description", "");
                                p.brand = item.value("brand", "");
                                p.image_url = item.value("image_url", "");
                                p.category_name = item.value("category", "");
                                if (p.id > 0) {
                                    allProducts.push_back(p);
                                }
                            }
                        }
                        else {
                            bot.getApi().sendMessage(chatId, u8"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤.");
                        }

                        users[chatId].currentProduct = target;
                        users[chatId].allProducts = allProducts;

                        auto getProductMenuKeyboard = []() -> TgBot::InlineKeyboardMarkup::Ptr {
                            TgBot::InlineKeyboardMarkup::Ptr keyboard(new TgBot::InlineKeyboardMarkup);

                            std::vector<TgBot::InlineKeyboardButton::Ptr> row1;
                            TgBot::InlineKeyboardButton::Ptr btnSimilar(new TgBot::InlineKeyboardButton);
                            btnSimilar->text = u8"üîÑ –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã";
                            btnSimilar->callbackData = "similar_products";
                            row1.push_back(btnSimilar);

                            TgBot::InlineKeyboardButton::Ptr btnMatch(new TgBot::InlineKeyboardButton);
                            btnMatch->text = u8"üëï –° —á–µ–º —Å–æ—á–µ—Ç–∞—Ç—å";
                            btnMatch->callbackData = "match_products";
                            row1.push_back(btnMatch);
                            keyboard->inlineKeyboard.push_back(row1);

                            std::vector<TgBot::InlineKeyboardButton::Ptr> row2;
                            TgBot::InlineKeyboardButton::Ptr btnCare(new TgBot::InlineKeyboardButton);
                            btnCare->text = u8"üßº –ö–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å";
                            btnCare->callbackData = "care_tips";
                            row2.push_back(btnCare);
                            keyboard->inlineKeyboard.push_back(row2);

                            std::vector<TgBot::InlineKeyboardButton::Ptr> rowNav;
                            TgBot::InlineKeyboardButton::Ptr btnBack(new TgBot::InlineKeyboardButton);
                            btnBack->text = u8"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É";
                            btnBack->callbackData = "back_to_search";
                            rowNav.push_back(btnBack);

                            TgBot::InlineKeyboardButton::Ptr btnMenu(new TgBot::InlineKeyboardButton);
                            btnMenu->text = u8"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é";
                            btnMenu->callbackData = "main_menu";
                            rowNav.push_back(btnMenu);
                            keyboard->inlineKeyboard.push_back(rowNav);

                            return keyboard;
                        };

                        bot.getApi().sendMessage(chatId, u8"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", false, 0, getProductMenuKeyboard());
                    }
                    else {
                        bot.getApi().sendMessage(chatId, u8"‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    }
                }
                catch (const std::exception& e) {
                    std::cout << u8"[ERROR] JSON parse error: " << e.what() << std::endl;
                    bot.getApi().sendMessage(chatId, u8"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞.");
                }
            }
            else {
                bot.getApi().sendMessage(chatId, u8"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–≤–∞—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞.");
            }

            users[chatId].awaitingProductId = false;
        }
        catch (...) {
            bot.getApi().sendMessage(chatId, u8"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.");
        }
    }
}
